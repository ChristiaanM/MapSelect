

/*
This file is part of MapSelect

Copyright (C) 2022  Christiaan Johann MÃ¼ller

MapSelect is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version."

MapSelect is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details."

"You should have received a copy of the GNU General Public License"
"along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef ALIAS_H
#define ALIAS_H

#include <algorithm>
#include <vector>
#include <unordered_map>


/*
An alias is a class that implements a mapping from a set of integer values to a key which is integer values that go from 0 to n,
 where n is the number of different ids. This is used, for example, to convert map point ids generated by SLAM algorithm that 
 could have deleted map points during operation. By using an alias - map point selection algorithms can assume that all map 
 points are labelled from 0 to n.
*/

class Alias 
{
    public: 
        virtual size_t id2key(size_t id) const = 0;
        virtual size_t key2id(size_t key) const = 0;
        virtual size_t size() const = 0;
        virtual size_t getLastId() const = 0;

        virtual std::vector<size_t> ids2keys(const std::vector<size_t> &ref_ids) const =0;
        
        virtual std::vector<size_t> keys2ids(const std::vector<size_t> &ref_keys) const =0;

};


class AliasIdentity : public Alias
{
    public:

        AliasIdentity(size_t max_id): max(max_id)
        {
        }

        size_t id2key(size_t id) const
        {
            return id;
        }

        size_t key2id(size_t key) const
        {
            return key;
        }

        size_t size() const {return max;} 
        size_t getLastId() const {return max;}

        std::vector<size_t> ids2keys(const std::vector<size_t> &ids) const {return ids;}
        std::vector<size_t> keys2ids(const std::vector<size_t> &keys) const {return keys;}


    private:
        size_t max;
};

class AliasMap : public Alias 
{
    public: 
        AliasMap(std::vector<size_t> &&ids, bool sorted = false )
        {
            vect_id = ids;
                        
            if (!sorted && !std::is_sorted(vect_id.begin(),vect_id.end()))
            {
                std::sort(vect_id.begin(),vect_id.end());
            }
  
             map_id2key.reserve(vect_id.size());
             for(size_t i=0;i<ids.size();i++)
             {
                map_id2key.emplace(ids[i],i);
             }
        }


        AliasMap(const std::vector<size_t> &ids, bool sorted = false) : AliasMap(std::vector<size_t>(ids),sorted)
        {
        }

        size_t id2key(size_t id) const
        {
            auto iter = map_id2key.find(id);
            if(iter != map_id2key.end())
                return iter->second;
            return 0;
        }

        size_t key2id(size_t key) const
        {
            return vect_id[key];
        }

        size_t size() const {return vect_id.size();} 
        size_t getLastId() const {return vect_id.back();}

        
        std::vector<size_t> ids2keys(const std::vector<size_t> &ids) const 
        {
            std::vector<size_t> out_keys;
            out_keys.reserve(ids.size());
            for(size_t id : ids)
            {
                auto iter = map_id2key.find(id);
                if(iter != map_id2key.end())
                    out_keys.push_back(iter->second);
            }
            return out_keys;
        }
        

        std::vector<size_t> keys2ids(const std::vector<size_t> &keys) const 
        {
            std::vector<size_t> out_ids;
            out_ids.reserve(keys.size());
            for(size_t key : keys)
            {
                out_ids.push_back(vect_id[key]);
            }
            return out_ids;
        } 

       
        
    private:
        std::vector<size_t> vect_id;
        std::unordered_map<size_t,size_t> map_id2key;
};






#endif